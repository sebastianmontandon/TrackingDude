generator client {
  provider        = "prisma-client-js"
  previewFeatures = []
  binaryTargets   = ["native"]
  engineType      = "binary"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

enum UserRole {
  USER
  ADMIN
  READ_ONLY
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String?
  emailVerified DateTime?
  image         String?
  phone         String?
  role          UserRole  @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model NotificationConfig {
  id             String   @id @default(cuid())
  userId         String   @unique
  emailConfig    Json?
  whatsappConfig Json?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("notification_configs")
}

model Domain {
  id             String   @id @default(cuid())
  name           String   @unique
  creationDate   DateTime
  website        String
  paymentPeriod  String
  expirationDate DateTime
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  baseCost       Float
  maintenanceFee Float
  totalCost      Float

  @@map("domains")
}

model Hosting {
  id               String   @id @default(cuid())
  domain           String
  provider         String
  paymentType      String
  includesHosting  Boolean
  registrationDate DateTime
  baseCost         Float
  maintenanceFee   Float
  totalCost        Float
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@map("hostings")
}

model Notification {
  id                 String             @id @default(cuid())
  type               NotificationType
  domain             String
  provider           String
  notificationDate   DateTime
  notificationMethod NotificationMethod
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  sent               Boolean            @default(false)
  sentAt             DateTime?

  @@map("notifications")
}

enum NotificationType {
  DOMAIN
  HOSTING
}

enum NotificationMethod {
  EMAIL
  WHATSAPP
}
